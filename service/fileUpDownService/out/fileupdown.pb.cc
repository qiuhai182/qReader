// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fileupdown.proto

#include "fileupdown.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace fileService {
class HttpRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HttpRequest>
      _instance;
} _HttpRequest_default_instance_;
class HttpResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HttpResponse>
      _instance;
} _HttpResponse_default_instance_;
class bookDownHttpRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<bookDownHttpRequest>
      _instance;
} _bookDownHttpRequest_default_instance_;
}  // namespace fileService
namespace protobuf_fileupdown_2eproto {
static void InitDefaultsHttpRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fileService::_HttpRequest_default_instance_;
    new (ptr) ::fileService::HttpRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fileService::HttpRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HttpRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHttpRequest}, {}};

static void InitDefaultsHttpResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fileService::_HttpResponse_default_instance_;
    new (ptr) ::fileService::HttpResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fileService::HttpResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HttpResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHttpResponse}, {}};

static void InitDefaultsbookDownHttpRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fileService::_bookDownHttpRequest_default_instance_;
    new (ptr) ::fileService::bookDownHttpRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fileService::bookDownHttpRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_bookDownHttpRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsbookDownHttpRequest}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_HttpRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HttpResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_bookDownHttpRequest.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fileService::HttpRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fileService::HttpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fileService::HttpResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fileService::HttpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fileService::bookDownHttpRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fileService::bookDownHttpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fileService::bookDownHttpRequest, bookid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fileService::bookDownHttpRequest, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fileService::bookDownHttpRequest, daytime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fileService::bookDownHttpRequest, count_),
  0,
  2,
  1,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::fileService::HttpRequest)},
  { 5, 10, sizeof(::fileService::HttpResponse)},
  { 10, 19, sizeof(::fileService::bookDownHttpRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::fileService::_HttpRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fileService::_HttpResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fileService::_bookDownHttpRequest_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "fileupdown.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020fileupdown.proto\022\013fileService\"\r\n\013HttpR"
      "equest\"\016\n\014HttpResponse\"U\n\023bookDownHttpRe"
      "quest\022\016\n\006bookId\030\001 \002(\t\022\016\n\006userId\030\002 \001(\005\022\017\n"
      "\007dayTime\030\003 \001(\t\022\r\n\005count\030\004 \001(\0052\235\001\n\013fileSe"
      "rvice\022B\n\013fileDownFun\022\030.fileService.HttpR"
      "equest\032\031.fileService.HttpResponse\022J\n\013boo"
      "kDownFun\022 .fileService.bookDownHttpReque"
      "st\032\031.fileService.HttpResponseB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 314);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fileupdown.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_fileupdown_2eproto
namespace fileService {

// ===================================================================

void HttpRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpRequest::HttpRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fileupdown_2eproto::scc_info_HttpRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fileService.HttpRequest)
}
HttpRequest::HttpRequest(const HttpRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fileService.HttpRequest)
}

void HttpRequest::SharedCtor() {
}

HttpRequest::~HttpRequest() {
  // @@protoc_insertion_point(destructor:fileService.HttpRequest)
  SharedDtor();
}

void HttpRequest::SharedDtor() {
}

void HttpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HttpRequest::descriptor() {
  ::protobuf_fileupdown_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fileupdown_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HttpRequest& HttpRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fileupdown_2eproto::scc_info_HttpRequest.base);
  return *internal_default_instance();
}


void HttpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fileService.HttpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HttpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fileService.HttpRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:fileService.HttpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fileService.HttpRequest)
  return false;
#undef DO_
}

void HttpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fileService.HttpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fileService.HttpRequest)
}

::google::protobuf::uint8* HttpRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fileService.HttpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fileService.HttpRequest)
  return target;
}

size_t HttpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fileService.HttpRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HttpRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fileService.HttpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fileService.HttpRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fileService.HttpRequest)
    MergeFrom(*source);
  }
}

void HttpRequest::MergeFrom(const HttpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fileService.HttpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HttpRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fileService.HttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpRequest::CopyFrom(const HttpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fileService.HttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpRequest::IsInitialized() const {
  return true;
}

void HttpRequest::Swap(HttpRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpRequest::InternalSwap(HttpRequest* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HttpRequest::GetMetadata() const {
  protobuf_fileupdown_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fileupdown_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HttpResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpResponse::HttpResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fileupdown_2eproto::scc_info_HttpResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fileService.HttpResponse)
}
HttpResponse::HttpResponse(const HttpResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fileService.HttpResponse)
}

void HttpResponse::SharedCtor() {
}

HttpResponse::~HttpResponse() {
  // @@protoc_insertion_point(destructor:fileService.HttpResponse)
  SharedDtor();
}

void HttpResponse::SharedDtor() {
}

void HttpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HttpResponse::descriptor() {
  ::protobuf_fileupdown_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fileupdown_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HttpResponse& HttpResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fileupdown_2eproto::scc_info_HttpResponse.base);
  return *internal_default_instance();
}


void HttpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fileService.HttpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HttpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fileService.HttpResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:fileService.HttpResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fileService.HttpResponse)
  return false;
#undef DO_
}

void HttpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fileService.HttpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fileService.HttpResponse)
}

::google::protobuf::uint8* HttpResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fileService.HttpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fileService.HttpResponse)
  return target;
}

size_t HttpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fileService.HttpResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HttpResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fileService.HttpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fileService.HttpResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fileService.HttpResponse)
    MergeFrom(*source);
  }
}

void HttpResponse::MergeFrom(const HttpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fileService.HttpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HttpResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fileService.HttpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpResponse::CopyFrom(const HttpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fileService.HttpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpResponse::IsInitialized() const {
  return true;
}

void HttpResponse::Swap(HttpResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpResponse::InternalSwap(HttpResponse* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HttpResponse::GetMetadata() const {
  protobuf_fileupdown_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fileupdown_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void bookDownHttpRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bookDownHttpRequest::kBookIdFieldNumber;
const int bookDownHttpRequest::kUserIdFieldNumber;
const int bookDownHttpRequest::kDayTimeFieldNumber;
const int bookDownHttpRequest::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bookDownHttpRequest::bookDownHttpRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fileupdown_2eproto::scc_info_bookDownHttpRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fileService.bookDownHttpRequest)
}
bookDownHttpRequest::bookDownHttpRequest(const bookDownHttpRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bookid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bookid()) {
    bookid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bookid_);
  }
  daytime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_daytime()) {
    daytime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.daytime_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:fileService.bookDownHttpRequest)
}

void bookDownHttpRequest::SharedCtor() {
  bookid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  daytime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(count_));
}

bookDownHttpRequest::~bookDownHttpRequest() {
  // @@protoc_insertion_point(destructor:fileService.bookDownHttpRequest)
  SharedDtor();
}

void bookDownHttpRequest::SharedDtor() {
  bookid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  daytime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void bookDownHttpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* bookDownHttpRequest::descriptor() {
  ::protobuf_fileupdown_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fileupdown_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const bookDownHttpRequest& bookDownHttpRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fileupdown_2eproto::scc_info_bookDownHttpRequest.base);
  return *internal_default_instance();
}


void bookDownHttpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fileService.bookDownHttpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      bookid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      daytime_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool bookDownHttpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fileService.bookDownHttpRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string bookId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bookid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bookid().data(), static_cast<int>(this->bookid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fileService.bookDownHttpRequest.bookId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 userId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dayTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_daytime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->daytime().data(), static_cast<int>(this->daytime().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fileService.bookDownHttpRequest.dayTime");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fileService.bookDownHttpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fileService.bookDownHttpRequest)
  return false;
#undef DO_
}

void bookDownHttpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fileService.bookDownHttpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string bookId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bookid().data(), static_cast<int>(this->bookid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fileService.bookDownHttpRequest.bookId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bookid(), output);
  }

  // optional int32 userId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional string dayTime = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->daytime().data(), static_cast<int>(this->daytime().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fileService.bookDownHttpRequest.dayTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->daytime(), output);
  }

  // optional int32 count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fileService.bookDownHttpRequest)
}

::google::protobuf::uint8* bookDownHttpRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fileService.bookDownHttpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string bookId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bookid().data(), static_cast<int>(this->bookid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fileService.bookDownHttpRequest.bookId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bookid(), target);
  }

  // optional int32 userId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // optional string dayTime = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->daytime().data(), static_cast<int>(this->daytime().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fileService.bookDownHttpRequest.dayTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->daytime(), target);
  }

  // optional int32 count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fileService.bookDownHttpRequest)
  return target;
}

size_t bookDownHttpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fileService.bookDownHttpRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string bookId = 1;
  if (has_bookid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bookid());
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional string dayTime = 3;
    if (has_daytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->daytime());
    }

    // optional int32 userId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bookDownHttpRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fileService.bookDownHttpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const bookDownHttpRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const bookDownHttpRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fileService.bookDownHttpRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fileService.bookDownHttpRequest)
    MergeFrom(*source);
  }
}

void bookDownHttpRequest::MergeFrom(const bookDownHttpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fileService.bookDownHttpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_bookid();
      bookid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bookid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_daytime();
      daytime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.daytime_);
    }
    if (cached_has_bits & 0x00000004u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000008u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void bookDownHttpRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fileService.bookDownHttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bookDownHttpRequest::CopyFrom(const bookDownHttpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fileService.bookDownHttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bookDownHttpRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void bookDownHttpRequest::Swap(bookDownHttpRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bookDownHttpRequest::InternalSwap(bookDownHttpRequest* other) {
  using std::swap;
  bookid_.Swap(&other->bookid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  daytime_.Swap(&other->daytime_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(count_, other->count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata bookDownHttpRequest::GetMetadata() const {
  protobuf_fileupdown_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fileupdown_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

fileService::~fileService() {}

const ::google::protobuf::ServiceDescriptor* fileService::descriptor() {
  protobuf_fileupdown_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fileupdown_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* fileService::GetDescriptor() {
  return descriptor();
}

void fileService::fileDownFun(::google::protobuf::RpcController* controller,
                         const ::fileService::HttpRequest*,
                         ::fileService::HttpResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method fileDownFun() not implemented.");
  done->Run();
}

void fileService::bookDownFun(::google::protobuf::RpcController* controller,
                         const ::fileService::bookDownHttpRequest*,
                         ::fileService::HttpResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method bookDownFun() not implemented.");
  done->Run();
}

void fileService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_fileupdown_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      fileDownFun(controller,
             ::google::protobuf::down_cast<const ::fileService::HttpRequest*>(request),
             ::google::protobuf::down_cast< ::fileService::HttpResponse*>(response),
             done);
      break;
    case 1:
      bookDownFun(controller,
             ::google::protobuf::down_cast<const ::fileService::bookDownHttpRequest*>(request),
             ::google::protobuf::down_cast< ::fileService::HttpResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& fileService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::fileService::HttpRequest::default_instance();
    case 1:
      return ::fileService::bookDownHttpRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& fileService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::fileService::HttpResponse::default_instance();
    case 1:
      return ::fileService::HttpResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

fileService_Stub::fileService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
fileService_Stub::fileService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
fileService_Stub::~fileService_Stub() {
  if (owns_channel_) delete channel_;
}

void fileService_Stub::fileDownFun(::google::protobuf::RpcController* controller,
                              const ::fileService::HttpRequest* request,
                              ::fileService::HttpResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void fileService_Stub::bookDownFun(::google::protobuf::RpcController* controller,
                              const ::fileService::bookDownHttpRequest* request,
                              ::fileService::HttpResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace fileService
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fileService::HttpRequest* Arena::CreateMaybeMessage< ::fileService::HttpRequest >(Arena* arena) {
  return Arena::CreateInternal< ::fileService::HttpRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fileService::HttpResponse* Arena::CreateMaybeMessage< ::fileService::HttpResponse >(Arena* arena) {
  return Arena::CreateInternal< ::fileService::HttpResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fileService::bookDownHttpRequest* Arena::CreateMaybeMessage< ::fileService::bookDownHttpRequest >(Arena* arena) {
  return Arena::CreateInternal< ::fileService::bookDownHttpRequest >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
