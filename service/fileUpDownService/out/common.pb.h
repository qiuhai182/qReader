// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_INCLUDED_common_2eproto
#define PROTOBUF_INCLUDED_common_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto 

namespace protobuf_common_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_common_2eproto
namespace commonService {
class DelCommentReq;
class DelCommentReqDefaultTypeInternal;
extern DelCommentReqDefaultTypeInternal _DelCommentReq_default_instance_;
class commentItem;
class commentItemDefaultTypeInternal;
extern commentItemDefaultTypeInternal _commentItem_default_instance_;
class commentListResp;
class commentListRespDefaultTypeInternal;
extern commentListRespDefaultTypeInternal _commentListResp_default_instance_;
class commonResp;
class commonRespDefaultTypeInternal;
extern commonRespDefaultTypeInternal _commonResp_default_instance_;
class getCommentReq;
class getCommentReqDefaultTypeInternal;
extern getCommentReqDefaultTypeInternal _getCommentReq_default_instance_;
class supportReq;
class supportReqDefaultTypeInternal;
extern supportReqDefaultTypeInternal _supportReq_default_instance_;
}  // namespace commonService
namespace google {
namespace protobuf {
template<> ::commonService::DelCommentReq* Arena::CreateMaybeMessage<::commonService::DelCommentReq>(Arena*);
template<> ::commonService::commentItem* Arena::CreateMaybeMessage<::commonService::commentItem>(Arena*);
template<> ::commonService::commentListResp* Arena::CreateMaybeMessage<::commonService::commentListResp>(Arena*);
template<> ::commonService::commonResp* Arena::CreateMaybeMessage<::commonService::commonResp>(Arena*);
template<> ::commonService::getCommentReq* Arena::CreateMaybeMessage<::commonService::getCommentReq>(Arena*);
template<> ::commonService::supportReq* Arena::CreateMaybeMessage<::commonService::supportReq>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace commonService {

// ===================================================================

class commonResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonService.commonResp) */ {
 public:
  commonResp();
  virtual ~commonResp();

  commonResp(const commonResp& from);

  inline commonResp& operator=(const commonResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  commonResp(commonResp&& from) noexcept
    : commonResp() {
    *this = ::std::move(from);
  }

  inline commonResp& operator=(commonResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const commonResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const commonResp* internal_default_instance() {
    return reinterpret_cast<const commonResp*>(
               &_commonResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(commonResp* other);
  friend void swap(commonResp& a, commonResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline commonResp* New() const final {
    return CreateMaybeMessage<commonResp>(NULL);
  }

  commonResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<commonResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const commonResp& from);
  void MergeFrom(const commonResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(commonResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string errorRes = 2;
  bool has_errorres() const;
  void clear_errorres();
  static const int kErrorResFieldNumber = 2;
  const ::std::string& errorres() const;
  void set_errorres(const ::std::string& value);
  #if LANG_CXX11
  void set_errorres(::std::string&& value);
  #endif
  void set_errorres(const char* value);
  void set_errorres(const char* value, size_t size);
  ::std::string* mutable_errorres();
  ::std::string* release_errorres();
  void set_allocated_errorres(::std::string* errorres);

  // required int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:commonService.commonResp)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_errorres();
  void clear_has_errorres();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr errorres_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class supportReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonService.supportReq) */ {
 public:
  supportReq();
  virtual ~supportReq();

  supportReq(const supportReq& from);

  inline supportReq& operator=(const supportReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  supportReq(supportReq&& from) noexcept
    : supportReq() {
    *this = ::std::move(from);
  }

  inline supportReq& operator=(supportReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const supportReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const supportReq* internal_default_instance() {
    return reinterpret_cast<const supportReq*>(
               &_supportReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(supportReq* other);
  friend void swap(supportReq& a, supportReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline supportReq* New() const final {
    return CreateMaybeMessage<supportReq>(NULL);
  }

  supportReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<supportReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const supportReq& from);
  void MergeFrom(const supportReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(supportReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string bookId = 1;
  bool has_bookid() const;
  void clear_bookid();
  static const int kBookIdFieldNumber = 1;
  const ::std::string& bookid() const;
  void set_bookid(const ::std::string& value);
  #if LANG_CXX11
  void set_bookid(::std::string&& value);
  #endif
  void set_bookid(const char* value);
  void set_bookid(const char* value, size_t size);
  ::std::string* mutable_bookid();
  ::std::string* release_bookid();
  void set_allocated_bookid(::std::string* bookid);

  // required string userId = 3;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 3;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required string timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp(::std::string&& value);
  #endif
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // optional int32 commentId = 2;
  bool has_commentid() const;
  void clear_commentid();
  static const int kCommentIdFieldNumber = 2;
  ::google::protobuf::int32 commentid() const;
  void set_commentid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:commonService.supportReq)
 private:
  void set_has_bookid();
  void clear_has_bookid();
  void set_has_commentid();
  void clear_has_commentid();
  void set_has_userid();
  void clear_has_userid();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr bookid_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  ::google::protobuf::int32 commentid_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class commentItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonService.commentItem) */ {
 public:
  commentItem();
  virtual ~commentItem();

  commentItem(const commentItem& from);

  inline commentItem& operator=(const commentItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  commentItem(commentItem&& from) noexcept
    : commentItem() {
    *this = ::std::move(from);
  }

  inline commentItem& operator=(commentItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const commentItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const commentItem* internal_default_instance() {
    return reinterpret_cast<const commentItem*>(
               &_commentItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(commentItem* other);
  friend void swap(commentItem& a, commentItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline commentItem* New() const final {
    return CreateMaybeMessage<commentItem>(NULL);
  }

  commentItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<commentItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const commentItem& from);
  void MergeFrom(const commentItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(commentItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .commonService.commentItem childComments = 12;
  int childcomments_size() const;
  void clear_childcomments();
  static const int kChildCommentsFieldNumber = 12;
  ::commonService::commentItem* mutable_childcomments(int index);
  ::google::protobuf::RepeatedPtrField< ::commonService::commentItem >*
      mutable_childcomments();
  const ::commonService::commentItem& childcomments(int index) const;
  ::commonService::commentItem* add_childcomments();
  const ::google::protobuf::RepeatedPtrField< ::commonService::commentItem >&
      childcomments() const;

  // optional string bookId = 1;
  bool has_bookid() const;
  void clear_bookid();
  static const int kBookIdFieldNumber = 1;
  const ::std::string& bookid() const;
  void set_bookid(const ::std::string& value);
  #if LANG_CXX11
  void set_bookid(::std::string&& value);
  #endif
  void set_bookid(const char* value);
  void set_bookid(const char* value, size_t size);
  ::std::string* mutable_bookid();
  ::std::string* release_bookid();
  void set_allocated_bookid(::std::string* bookid);

  // required string commentContent = 5;
  bool has_commentcontent() const;
  void clear_commentcontent();
  static const int kCommentContentFieldNumber = 5;
  const ::std::string& commentcontent() const;
  void set_commentcontent(const ::std::string& value);
  #if LANG_CXX11
  void set_commentcontent(::std::string&& value);
  #endif
  void set_commentcontent(const char* value);
  void set_commentcontent(const char* value, size_t size);
  ::std::string* mutable_commentcontent();
  ::std::string* release_commentcontent();
  void set_allocated_commentcontent(::std::string* commentcontent);

  // required string userId = 6;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 6;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional string nickName = 7;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 7;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string headUrl = 8;
  bool has_headurl() const;
  void clear_headurl();
  static const int kHeadUrlFieldNumber = 8;
  const ::std::string& headurl() const;
  void set_headurl(const ::std::string& value);
  #if LANG_CXX11
  void set_headurl(::std::string&& value);
  #endif
  void set_headurl(const char* value);
  void set_headurl(const char* value, size_t size);
  ::std::string* mutable_headurl();
  ::std::string* release_headurl();
  void set_allocated_headurl(::std::string* headurl);

  // required string timestamp = 9;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 9;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp(::std::string&& value);
  #endif
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // optional string hitId = 10;
  bool has_hitid() const;
  void clear_hitid();
  static const int kHitIdFieldNumber = 10;
  const ::std::string& hitid() const;
  void set_hitid(const ::std::string& value);
  #if LANG_CXX11
  void set_hitid(::std::string&& value);
  #endif
  void set_hitid(const char* value);
  void set_hitid(const char* value, size_t size);
  ::std::string* mutable_hitid();
  ::std::string* release_hitid();
  void set_allocated_hitid(::std::string* hitid);

  // optional int32 pageNum = 2;
  bool has_pagenum() const;
  void clear_pagenum();
  static const int kPageNumFieldNumber = 2;
  ::google::protobuf::int32 pagenum() const;
  void set_pagenum(::google::protobuf::int32 value);

  // optional int32 commentId = 3;
  bool has_commentid() const;
  void clear_commentid();
  static const int kCommentIdFieldNumber = 3;
  ::google::protobuf::int32 commentid() const;
  void set_commentid(::google::protobuf::int32 value);

  // optional int32 parentId = 4;
  bool has_parentid() const;
  void clear_parentid();
  static const int kParentIdFieldNumber = 4;
  ::google::protobuf::int32 parentid() const;
  void set_parentid(::google::protobuf::int32 value);

  // optional int32 childCount = 11;
  bool has_childcount() const;
  void clear_childcount();
  static const int kChildCountFieldNumber = 11;
  ::google::protobuf::int32 childcount() const;
  void set_childcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:commonService.commentItem)
 private:
  void set_has_bookid();
  void clear_has_bookid();
  void set_has_pagenum();
  void clear_has_pagenum();
  void set_has_commentid();
  void clear_has_commentid();
  void set_has_parentid();
  void clear_has_parentid();
  void set_has_commentcontent();
  void clear_has_commentcontent();
  void set_has_userid();
  void clear_has_userid();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_headurl();
  void clear_has_headurl();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_hitid();
  void clear_has_hitid();
  void set_has_childcount();
  void clear_has_childcount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::commonService::commentItem > childcomments_;
  ::google::protobuf::internal::ArenaStringPtr bookid_;
  ::google::protobuf::internal::ArenaStringPtr commentcontent_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr headurl_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  ::google::protobuf::internal::ArenaStringPtr hitid_;
  ::google::protobuf::int32 pagenum_;
  ::google::protobuf::int32 commentid_;
  ::google::protobuf::int32 parentid_;
  ::google::protobuf::int32 childcount_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DelCommentReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonService.DelCommentReq) */ {
 public:
  DelCommentReq();
  virtual ~DelCommentReq();

  DelCommentReq(const DelCommentReq& from);

  inline DelCommentReq& operator=(const DelCommentReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DelCommentReq(DelCommentReq&& from) noexcept
    : DelCommentReq() {
    *this = ::std::move(from);
  }

  inline DelCommentReq& operator=(DelCommentReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelCommentReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelCommentReq* internal_default_instance() {
    return reinterpret_cast<const DelCommentReq*>(
               &_DelCommentReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DelCommentReq* other);
  friend void swap(DelCommentReq& a, DelCommentReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DelCommentReq* New() const final {
    return CreateMaybeMessage<DelCommentReq>(NULL);
  }

  DelCommentReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DelCommentReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DelCommentReq& from);
  void MergeFrom(const DelCommentReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelCommentReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required int32 commentId = 2;
  bool has_commentid() const;
  void clear_commentid();
  static const int kCommentIdFieldNumber = 2;
  ::google::protobuf::int32 commentid() const;
  void set_commentid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:commonService.DelCommentReq)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_commentid();
  void clear_has_commentid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 commentid_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class commentListResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonService.commentListResp) */ {
 public:
  commentListResp();
  virtual ~commentListResp();

  commentListResp(const commentListResp& from);

  inline commentListResp& operator=(const commentListResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  commentListResp(commentListResp&& from) noexcept
    : commentListResp() {
    *this = ::std::move(from);
  }

  inline commentListResp& operator=(commentListResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const commentListResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const commentListResp* internal_default_instance() {
    return reinterpret_cast<const commentListResp*>(
               &_commentListResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(commentListResp* other);
  friend void swap(commentListResp& a, commentListResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline commentListResp* New() const final {
    return CreateMaybeMessage<commentListResp>(NULL);
  }

  commentListResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<commentListResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const commentListResp& from);
  void MergeFrom(const commentListResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(commentListResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .commonService.commentItem lists = 1;
  int lists_size() const;
  void clear_lists();
  static const int kListsFieldNumber = 1;
  ::commonService::commentItem* mutable_lists(int index);
  ::google::protobuf::RepeatedPtrField< ::commonService::commentItem >*
      mutable_lists();
  const ::commonService::commentItem& lists(int index) const;
  ::commonService::commentItem* add_lists();
  const ::google::protobuf::RepeatedPtrField< ::commonService::commentItem >&
      lists() const;

  // required int32 count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:commonService.commentListResp)
 private:
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::commonService::commentItem > lists_;
  ::google::protobuf::int32 count_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class getCommentReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commonService.getCommentReq) */ {
 public:
  getCommentReq();
  virtual ~getCommentReq();

  getCommentReq(const getCommentReq& from);

  inline getCommentReq& operator=(const getCommentReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  getCommentReq(getCommentReq&& from) noexcept
    : getCommentReq() {
    *this = ::std::move(from);
  }

  inline getCommentReq& operator=(getCommentReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getCommentReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const getCommentReq* internal_default_instance() {
    return reinterpret_cast<const getCommentReq*>(
               &_getCommentReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(getCommentReq* other);
  friend void swap(getCommentReq& a, getCommentReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline getCommentReq* New() const final {
    return CreateMaybeMessage<getCommentReq>(NULL);
  }

  getCommentReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<getCommentReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const getCommentReq& from);
  void MergeFrom(const getCommentReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getCommentReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional string bookId = 2;
  bool has_bookid() const;
  void clear_bookid();
  static const int kBookIdFieldNumber = 2;
  const ::std::string& bookid() const;
  void set_bookid(const ::std::string& value);
  #if LANG_CXX11
  void set_bookid(::std::string&& value);
  #endif
  void set_bookid(const char* value);
  void set_bookid(const char* value, size_t size);
  ::std::string* mutable_bookid();
  ::std::string* release_bookid();
  void set_allocated_bookid(::std::string* bookid);

  // optional int32 pageNum = 3;
  bool has_pagenum() const;
  void clear_pagenum();
  static const int kPageNumFieldNumber = 3;
  ::google::protobuf::int32 pagenum() const;
  void set_pagenum(::google::protobuf::int32 value);

  // optional int32 lines = 4;
  bool has_lines() const;
  void clear_lines();
  static const int kLinesFieldNumber = 4;
  ::google::protobuf::int32 lines() const;
  void set_lines(::google::protobuf::int32 value);

  // optional int32 count = 5;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 5;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:commonService.getCommentReq)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_bookid();
  void clear_has_bookid();
  void set_has_pagenum();
  void clear_has_pagenum();
  void set_has_lines();
  void clear_has_lines();
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr bookid_;
  ::google::protobuf::int32 pagenum_;
  ::google::protobuf::int32 lines_;
  ::google::protobuf::int32 count_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// ===================================================================

class commonService_Stub;

class commonService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline commonService() {};
 public:
  virtual ~commonService();

  typedef commonService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void addCommentFun(::google::protobuf::RpcController* controller,
                       const ::commonService::commentItem* request,
                       ::commonService::commonResp* response,
                       ::google::protobuf::Closure* done);
  virtual void delCommentFun(::google::protobuf::RpcController* controller,
                       const ::commonService::DelCommentReq* request,
                       ::commonService::commonResp* response,
                       ::google::protobuf::Closure* done);
  virtual void getCommentFun(::google::protobuf::RpcController* controller,
                       const ::commonService::getCommentReq* request,
                       ::commonService::commentListResp* response,
                       ::google::protobuf::Closure* done);
  virtual void getCommentRecordFun(::google::protobuf::RpcController* controller,
                       const ::commonService::getCommentReq* request,
                       ::commonService::commentListResp* response,
                       ::google::protobuf::Closure* done);
  virtual void delCommentRecordFun(::google::protobuf::RpcController* controller,
                       const ::commonService::DelCommentReq* request,
                       ::commonService::commonResp* response,
                       ::google::protobuf::Closure* done);
  virtual void addSupportFun(::google::protobuf::RpcController* controller,
                       const ::commonService::supportReq* request,
                       ::commonService::commonResp* response,
                       ::google::protobuf::Closure* done);
  virtual void delSupportFun(::google::protobuf::RpcController* controller,
                       const ::commonService::supportReq* request,
                       ::commonService::commonResp* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(commonService);
};

class commonService_Stub : public commonService {
 public:
  commonService_Stub(::google::protobuf::RpcChannel* channel);
  commonService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~commonService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements commonService ------------------------------------------

  void addCommentFun(::google::protobuf::RpcController* controller,
                       const ::commonService::commentItem* request,
                       ::commonService::commonResp* response,
                       ::google::protobuf::Closure* done);
  void delCommentFun(::google::protobuf::RpcController* controller,
                       const ::commonService::DelCommentReq* request,
                       ::commonService::commonResp* response,
                       ::google::protobuf::Closure* done);
  void getCommentFun(::google::protobuf::RpcController* controller,
                       const ::commonService::getCommentReq* request,
                       ::commonService::commentListResp* response,
                       ::google::protobuf::Closure* done);
  void getCommentRecordFun(::google::protobuf::RpcController* controller,
                       const ::commonService::getCommentReq* request,
                       ::commonService::commentListResp* response,
                       ::google::protobuf::Closure* done);
  void delCommentRecordFun(::google::protobuf::RpcController* controller,
                       const ::commonService::DelCommentReq* request,
                       ::commonService::commonResp* response,
                       ::google::protobuf::Closure* done);
  void addSupportFun(::google::protobuf::RpcController* controller,
                       const ::commonService::supportReq* request,
                       ::commonService::commonResp* response,
                       ::google::protobuf::Closure* done);
  void delSupportFun(::google::protobuf::RpcController* controller,
                       const ::commonService::supportReq* request,
                       ::commonService::commonResp* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(commonService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// commonResp

// required int32 code = 1;
inline bool commonResp::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void commonResp::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void commonResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void commonResp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 commonResp::code() const {
  // @@protoc_insertion_point(field_get:commonService.commonResp.code)
  return code_;
}
inline void commonResp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:commonService.commonResp.code)
}

// optional string errorRes = 2;
inline bool commonResp::has_errorres() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void commonResp::set_has_errorres() {
  _has_bits_[0] |= 0x00000001u;
}
inline void commonResp::clear_has_errorres() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void commonResp::clear_errorres() {
  errorres_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_errorres();
}
inline const ::std::string& commonResp::errorres() const {
  // @@protoc_insertion_point(field_get:commonService.commonResp.errorRes)
  return errorres_.GetNoArena();
}
inline void commonResp::set_errorres(const ::std::string& value) {
  set_has_errorres();
  errorres_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:commonService.commonResp.errorRes)
}
#if LANG_CXX11
inline void commonResp::set_errorres(::std::string&& value) {
  set_has_errorres();
  errorres_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:commonService.commonResp.errorRes)
}
#endif
inline void commonResp::set_errorres(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_errorres();
  errorres_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:commonService.commonResp.errorRes)
}
inline void commonResp::set_errorres(const char* value, size_t size) {
  set_has_errorres();
  errorres_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:commonService.commonResp.errorRes)
}
inline ::std::string* commonResp::mutable_errorres() {
  set_has_errorres();
  // @@protoc_insertion_point(field_mutable:commonService.commonResp.errorRes)
  return errorres_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* commonResp::release_errorres() {
  // @@protoc_insertion_point(field_release:commonService.commonResp.errorRes)
  if (!has_errorres()) {
    return NULL;
  }
  clear_has_errorres();
  return errorres_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void commonResp::set_allocated_errorres(::std::string* errorres) {
  if (errorres != NULL) {
    set_has_errorres();
  } else {
    clear_has_errorres();
  }
  errorres_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errorres);
  // @@protoc_insertion_point(field_set_allocated:commonService.commonResp.errorRes)
}

// -------------------------------------------------------------------

// supportReq

// required string bookId = 1;
inline bool supportReq::has_bookid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void supportReq::set_has_bookid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void supportReq::clear_has_bookid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void supportReq::clear_bookid() {
  bookid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bookid();
}
inline const ::std::string& supportReq::bookid() const {
  // @@protoc_insertion_point(field_get:commonService.supportReq.bookId)
  return bookid_.GetNoArena();
}
inline void supportReq::set_bookid(const ::std::string& value) {
  set_has_bookid();
  bookid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:commonService.supportReq.bookId)
}
#if LANG_CXX11
inline void supportReq::set_bookid(::std::string&& value) {
  set_has_bookid();
  bookid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:commonService.supportReq.bookId)
}
#endif
inline void supportReq::set_bookid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bookid();
  bookid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:commonService.supportReq.bookId)
}
inline void supportReq::set_bookid(const char* value, size_t size) {
  set_has_bookid();
  bookid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:commonService.supportReq.bookId)
}
inline ::std::string* supportReq::mutable_bookid() {
  set_has_bookid();
  // @@protoc_insertion_point(field_mutable:commonService.supportReq.bookId)
  return bookid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* supportReq::release_bookid() {
  // @@protoc_insertion_point(field_release:commonService.supportReq.bookId)
  if (!has_bookid()) {
    return NULL;
  }
  clear_has_bookid();
  return bookid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void supportReq::set_allocated_bookid(::std::string* bookid) {
  if (bookid != NULL) {
    set_has_bookid();
  } else {
    clear_has_bookid();
  }
  bookid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bookid);
  // @@protoc_insertion_point(field_set_allocated:commonService.supportReq.bookId)
}

// optional int32 commentId = 2;
inline bool supportReq::has_commentid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void supportReq::set_has_commentid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void supportReq::clear_has_commentid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void supportReq::clear_commentid() {
  commentid_ = 0;
  clear_has_commentid();
}
inline ::google::protobuf::int32 supportReq::commentid() const {
  // @@protoc_insertion_point(field_get:commonService.supportReq.commentId)
  return commentid_;
}
inline void supportReq::set_commentid(::google::protobuf::int32 value) {
  set_has_commentid();
  commentid_ = value;
  // @@protoc_insertion_point(field_set:commonService.supportReq.commentId)
}

// required string userId = 3;
inline bool supportReq::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void supportReq::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void supportReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void supportReq::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& supportReq::userid() const {
  // @@protoc_insertion_point(field_get:commonService.supportReq.userId)
  return userid_.GetNoArena();
}
inline void supportReq::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:commonService.supportReq.userId)
}
#if LANG_CXX11
inline void supportReq::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:commonService.supportReq.userId)
}
#endif
inline void supportReq::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:commonService.supportReq.userId)
}
inline void supportReq::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:commonService.supportReq.userId)
}
inline ::std::string* supportReq::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:commonService.supportReq.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* supportReq::release_userid() {
  // @@protoc_insertion_point(field_release:commonService.supportReq.userId)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void supportReq::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:commonService.supportReq.userId)
}

// required string timestamp = 4;
inline bool supportReq::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void supportReq::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void supportReq::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void supportReq::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp();
}
inline const ::std::string& supportReq::timestamp() const {
  // @@protoc_insertion_point(field_get:commonService.supportReq.timestamp)
  return timestamp_.GetNoArena();
}
inline void supportReq::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:commonService.supportReq.timestamp)
}
#if LANG_CXX11
inline void supportReq::set_timestamp(::std::string&& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:commonService.supportReq.timestamp)
}
#endif
inline void supportReq::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:commonService.supportReq.timestamp)
}
inline void supportReq::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:commonService.supportReq.timestamp)
}
inline ::std::string* supportReq::mutable_timestamp() {
  set_has_timestamp();
  // @@protoc_insertion_point(field_mutable:commonService.supportReq.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* supportReq::release_timestamp() {
  // @@protoc_insertion_point(field_release:commonService.supportReq.timestamp)
  if (!has_timestamp()) {
    return NULL;
  }
  clear_has_timestamp();
  return timestamp_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void supportReq::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:commonService.supportReq.timestamp)
}

// -------------------------------------------------------------------

// commentItem

// optional string bookId = 1;
inline bool commentItem::has_bookid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void commentItem::set_has_bookid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void commentItem::clear_has_bookid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void commentItem::clear_bookid() {
  bookid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bookid();
}
inline const ::std::string& commentItem::bookid() const {
  // @@protoc_insertion_point(field_get:commonService.commentItem.bookId)
  return bookid_.GetNoArena();
}
inline void commentItem::set_bookid(const ::std::string& value) {
  set_has_bookid();
  bookid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:commonService.commentItem.bookId)
}
#if LANG_CXX11
inline void commentItem::set_bookid(::std::string&& value) {
  set_has_bookid();
  bookid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:commonService.commentItem.bookId)
}
#endif
inline void commentItem::set_bookid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bookid();
  bookid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:commonService.commentItem.bookId)
}
inline void commentItem::set_bookid(const char* value, size_t size) {
  set_has_bookid();
  bookid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:commonService.commentItem.bookId)
}
inline ::std::string* commentItem::mutable_bookid() {
  set_has_bookid();
  // @@protoc_insertion_point(field_mutable:commonService.commentItem.bookId)
  return bookid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* commentItem::release_bookid() {
  // @@protoc_insertion_point(field_release:commonService.commentItem.bookId)
  if (!has_bookid()) {
    return NULL;
  }
  clear_has_bookid();
  return bookid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void commentItem::set_allocated_bookid(::std::string* bookid) {
  if (bookid != NULL) {
    set_has_bookid();
  } else {
    clear_has_bookid();
  }
  bookid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bookid);
  // @@protoc_insertion_point(field_set_allocated:commonService.commentItem.bookId)
}

// optional int32 pageNum = 2;
inline bool commentItem::has_pagenum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void commentItem::set_has_pagenum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void commentItem::clear_has_pagenum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void commentItem::clear_pagenum() {
  pagenum_ = 0;
  clear_has_pagenum();
}
inline ::google::protobuf::int32 commentItem::pagenum() const {
  // @@protoc_insertion_point(field_get:commonService.commentItem.pageNum)
  return pagenum_;
}
inline void commentItem::set_pagenum(::google::protobuf::int32 value) {
  set_has_pagenum();
  pagenum_ = value;
  // @@protoc_insertion_point(field_set:commonService.commentItem.pageNum)
}

// optional int32 commentId = 3;
inline bool commentItem::has_commentid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void commentItem::set_has_commentid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void commentItem::clear_has_commentid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void commentItem::clear_commentid() {
  commentid_ = 0;
  clear_has_commentid();
}
inline ::google::protobuf::int32 commentItem::commentid() const {
  // @@protoc_insertion_point(field_get:commonService.commentItem.commentId)
  return commentid_;
}
inline void commentItem::set_commentid(::google::protobuf::int32 value) {
  set_has_commentid();
  commentid_ = value;
  // @@protoc_insertion_point(field_set:commonService.commentItem.commentId)
}

// optional int32 parentId = 4;
inline bool commentItem::has_parentid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void commentItem::set_has_parentid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void commentItem::clear_has_parentid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void commentItem::clear_parentid() {
  parentid_ = 0;
  clear_has_parentid();
}
inline ::google::protobuf::int32 commentItem::parentid() const {
  // @@protoc_insertion_point(field_get:commonService.commentItem.parentId)
  return parentid_;
}
inline void commentItem::set_parentid(::google::protobuf::int32 value) {
  set_has_parentid();
  parentid_ = value;
  // @@protoc_insertion_point(field_set:commonService.commentItem.parentId)
}

// required string commentContent = 5;
inline bool commentItem::has_commentcontent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void commentItem::set_has_commentcontent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void commentItem::clear_has_commentcontent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void commentItem::clear_commentcontent() {
  commentcontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_commentcontent();
}
inline const ::std::string& commentItem::commentcontent() const {
  // @@protoc_insertion_point(field_get:commonService.commentItem.commentContent)
  return commentcontent_.GetNoArena();
}
inline void commentItem::set_commentcontent(const ::std::string& value) {
  set_has_commentcontent();
  commentcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:commonService.commentItem.commentContent)
}
#if LANG_CXX11
inline void commentItem::set_commentcontent(::std::string&& value) {
  set_has_commentcontent();
  commentcontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:commonService.commentItem.commentContent)
}
#endif
inline void commentItem::set_commentcontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_commentcontent();
  commentcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:commonService.commentItem.commentContent)
}
inline void commentItem::set_commentcontent(const char* value, size_t size) {
  set_has_commentcontent();
  commentcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:commonService.commentItem.commentContent)
}
inline ::std::string* commentItem::mutable_commentcontent() {
  set_has_commentcontent();
  // @@protoc_insertion_point(field_mutable:commonService.commentItem.commentContent)
  return commentcontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* commentItem::release_commentcontent() {
  // @@protoc_insertion_point(field_release:commonService.commentItem.commentContent)
  if (!has_commentcontent()) {
    return NULL;
  }
  clear_has_commentcontent();
  return commentcontent_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void commentItem::set_allocated_commentcontent(::std::string* commentcontent) {
  if (commentcontent != NULL) {
    set_has_commentcontent();
  } else {
    clear_has_commentcontent();
  }
  commentcontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commentcontent);
  // @@protoc_insertion_point(field_set_allocated:commonService.commentItem.commentContent)
}

// required string userId = 6;
inline bool commentItem::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void commentItem::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void commentItem::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void commentItem::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& commentItem::userid() const {
  // @@protoc_insertion_point(field_get:commonService.commentItem.userId)
  return userid_.GetNoArena();
}
inline void commentItem::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:commonService.commentItem.userId)
}
#if LANG_CXX11
inline void commentItem::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:commonService.commentItem.userId)
}
#endif
inline void commentItem::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:commonService.commentItem.userId)
}
inline void commentItem::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:commonService.commentItem.userId)
}
inline ::std::string* commentItem::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:commonService.commentItem.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* commentItem::release_userid() {
  // @@protoc_insertion_point(field_release:commonService.commentItem.userId)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void commentItem::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:commonService.commentItem.userId)
}

// optional string nickName = 7;
inline bool commentItem::has_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void commentItem::set_has_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void commentItem::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void commentItem::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& commentItem::nickname() const {
  // @@protoc_insertion_point(field_get:commonService.commentItem.nickName)
  return nickname_.GetNoArena();
}
inline void commentItem::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:commonService.commentItem.nickName)
}
#if LANG_CXX11
inline void commentItem::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:commonService.commentItem.nickName)
}
#endif
inline void commentItem::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:commonService.commentItem.nickName)
}
inline void commentItem::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:commonService.commentItem.nickName)
}
inline ::std::string* commentItem::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:commonService.commentItem.nickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* commentItem::release_nickname() {
  // @@protoc_insertion_point(field_release:commonService.commentItem.nickName)
  if (!has_nickname()) {
    return NULL;
  }
  clear_has_nickname();
  return nickname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void commentItem::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:commonService.commentItem.nickName)
}

// optional string headUrl = 8;
inline bool commentItem::has_headurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void commentItem::set_has_headurl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void commentItem::clear_has_headurl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void commentItem::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headurl();
}
inline const ::std::string& commentItem::headurl() const {
  // @@protoc_insertion_point(field_get:commonService.commentItem.headUrl)
  return headurl_.GetNoArena();
}
inline void commentItem::set_headurl(const ::std::string& value) {
  set_has_headurl();
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:commonService.commentItem.headUrl)
}
#if LANG_CXX11
inline void commentItem::set_headurl(::std::string&& value) {
  set_has_headurl();
  headurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:commonService.commentItem.headUrl)
}
#endif
inline void commentItem::set_headurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_headurl();
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:commonService.commentItem.headUrl)
}
inline void commentItem::set_headurl(const char* value, size_t size) {
  set_has_headurl();
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:commonService.commentItem.headUrl)
}
inline ::std::string* commentItem::mutable_headurl() {
  set_has_headurl();
  // @@protoc_insertion_point(field_mutable:commonService.commentItem.headUrl)
  return headurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* commentItem::release_headurl() {
  // @@protoc_insertion_point(field_release:commonService.commentItem.headUrl)
  if (!has_headurl()) {
    return NULL;
  }
  clear_has_headurl();
  return headurl_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void commentItem::set_allocated_headurl(::std::string* headurl) {
  if (headurl != NULL) {
    set_has_headurl();
  } else {
    clear_has_headurl();
  }
  headurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:commonService.commentItem.headUrl)
}

// required string timestamp = 9;
inline bool commentItem::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void commentItem::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void commentItem::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void commentItem::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp();
}
inline const ::std::string& commentItem::timestamp() const {
  // @@protoc_insertion_point(field_get:commonService.commentItem.timestamp)
  return timestamp_.GetNoArena();
}
inline void commentItem::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:commonService.commentItem.timestamp)
}
#if LANG_CXX11
inline void commentItem::set_timestamp(::std::string&& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:commonService.commentItem.timestamp)
}
#endif
inline void commentItem::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:commonService.commentItem.timestamp)
}
inline void commentItem::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:commonService.commentItem.timestamp)
}
inline ::std::string* commentItem::mutable_timestamp() {
  set_has_timestamp();
  // @@protoc_insertion_point(field_mutable:commonService.commentItem.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* commentItem::release_timestamp() {
  // @@protoc_insertion_point(field_release:commonService.commentItem.timestamp)
  if (!has_timestamp()) {
    return NULL;
  }
  clear_has_timestamp();
  return timestamp_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void commentItem::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:commonService.commentItem.timestamp)
}

// optional string hitId = 10;
inline bool commentItem::has_hitid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void commentItem::set_has_hitid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void commentItem::clear_has_hitid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void commentItem::clear_hitid() {
  hitid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hitid();
}
inline const ::std::string& commentItem::hitid() const {
  // @@protoc_insertion_point(field_get:commonService.commentItem.hitId)
  return hitid_.GetNoArena();
}
inline void commentItem::set_hitid(const ::std::string& value) {
  set_has_hitid();
  hitid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:commonService.commentItem.hitId)
}
#if LANG_CXX11
inline void commentItem::set_hitid(::std::string&& value) {
  set_has_hitid();
  hitid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:commonService.commentItem.hitId)
}
#endif
inline void commentItem::set_hitid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hitid();
  hitid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:commonService.commentItem.hitId)
}
inline void commentItem::set_hitid(const char* value, size_t size) {
  set_has_hitid();
  hitid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:commonService.commentItem.hitId)
}
inline ::std::string* commentItem::mutable_hitid() {
  set_has_hitid();
  // @@protoc_insertion_point(field_mutable:commonService.commentItem.hitId)
  return hitid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* commentItem::release_hitid() {
  // @@protoc_insertion_point(field_release:commonService.commentItem.hitId)
  if (!has_hitid()) {
    return NULL;
  }
  clear_has_hitid();
  return hitid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void commentItem::set_allocated_hitid(::std::string* hitid) {
  if (hitid != NULL) {
    set_has_hitid();
  } else {
    clear_has_hitid();
  }
  hitid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hitid);
  // @@protoc_insertion_point(field_set_allocated:commonService.commentItem.hitId)
}

// optional int32 childCount = 11;
inline bool commentItem::has_childcount() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void commentItem::set_has_childcount() {
  _has_bits_[0] |= 0x00000400u;
}
inline void commentItem::clear_has_childcount() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void commentItem::clear_childcount() {
  childcount_ = 0;
  clear_has_childcount();
}
inline ::google::protobuf::int32 commentItem::childcount() const {
  // @@protoc_insertion_point(field_get:commonService.commentItem.childCount)
  return childcount_;
}
inline void commentItem::set_childcount(::google::protobuf::int32 value) {
  set_has_childcount();
  childcount_ = value;
  // @@protoc_insertion_point(field_set:commonService.commentItem.childCount)
}

// repeated .commonService.commentItem childComments = 12;
inline int commentItem::childcomments_size() const {
  return childcomments_.size();
}
inline void commentItem::clear_childcomments() {
  childcomments_.Clear();
}
inline ::commonService::commentItem* commentItem::mutable_childcomments(int index) {
  // @@protoc_insertion_point(field_mutable:commonService.commentItem.childComments)
  return childcomments_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::commonService::commentItem >*
commentItem::mutable_childcomments() {
  // @@protoc_insertion_point(field_mutable_list:commonService.commentItem.childComments)
  return &childcomments_;
}
inline const ::commonService::commentItem& commentItem::childcomments(int index) const {
  // @@protoc_insertion_point(field_get:commonService.commentItem.childComments)
  return childcomments_.Get(index);
}
inline ::commonService::commentItem* commentItem::add_childcomments() {
  // @@protoc_insertion_point(field_add:commonService.commentItem.childComments)
  return childcomments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::commonService::commentItem >&
commentItem::childcomments() const {
  // @@protoc_insertion_point(field_list:commonService.commentItem.childComments)
  return childcomments_;
}

// -------------------------------------------------------------------

// DelCommentReq

// required string userId = 1;
inline bool DelCommentReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelCommentReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelCommentReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelCommentReq::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& DelCommentReq::userid() const {
  // @@protoc_insertion_point(field_get:commonService.DelCommentReq.userId)
  return userid_.GetNoArena();
}
inline void DelCommentReq::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:commonService.DelCommentReq.userId)
}
#if LANG_CXX11
inline void DelCommentReq::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:commonService.DelCommentReq.userId)
}
#endif
inline void DelCommentReq::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:commonService.DelCommentReq.userId)
}
inline void DelCommentReq::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:commonService.DelCommentReq.userId)
}
inline ::std::string* DelCommentReq::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:commonService.DelCommentReq.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DelCommentReq::release_userid() {
  // @@protoc_insertion_point(field_release:commonService.DelCommentReq.userId)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DelCommentReq::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:commonService.DelCommentReq.userId)
}

// required int32 commentId = 2;
inline bool DelCommentReq::has_commentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelCommentReq::set_has_commentid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelCommentReq::clear_has_commentid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelCommentReq::clear_commentid() {
  commentid_ = 0;
  clear_has_commentid();
}
inline ::google::protobuf::int32 DelCommentReq::commentid() const {
  // @@protoc_insertion_point(field_get:commonService.DelCommentReq.commentId)
  return commentid_;
}
inline void DelCommentReq::set_commentid(::google::protobuf::int32 value) {
  set_has_commentid();
  commentid_ = value;
  // @@protoc_insertion_point(field_set:commonService.DelCommentReq.commentId)
}

// -------------------------------------------------------------------

// commentListResp

// repeated .commonService.commentItem lists = 1;
inline int commentListResp::lists_size() const {
  return lists_.size();
}
inline void commentListResp::clear_lists() {
  lists_.Clear();
}
inline ::commonService::commentItem* commentListResp::mutable_lists(int index) {
  // @@protoc_insertion_point(field_mutable:commonService.commentListResp.lists)
  return lists_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::commonService::commentItem >*
commentListResp::mutable_lists() {
  // @@protoc_insertion_point(field_mutable_list:commonService.commentListResp.lists)
  return &lists_;
}
inline const ::commonService::commentItem& commentListResp::lists(int index) const {
  // @@protoc_insertion_point(field_get:commonService.commentListResp.lists)
  return lists_.Get(index);
}
inline ::commonService::commentItem* commentListResp::add_lists() {
  // @@protoc_insertion_point(field_add:commonService.commentListResp.lists)
  return lists_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::commonService::commentItem >&
commentListResp::lists() const {
  // @@protoc_insertion_point(field_list:commonService.commentListResp.lists)
  return lists_;
}

// required int32 count = 2;
inline bool commentListResp::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void commentListResp::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void commentListResp::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void commentListResp::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 commentListResp::count() const {
  // @@protoc_insertion_point(field_get:commonService.commentListResp.count)
  return count_;
}
inline void commentListResp::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:commonService.commentListResp.count)
}

// -------------------------------------------------------------------

// getCommentReq

// optional string userId = 1;
inline bool getCommentReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void getCommentReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void getCommentReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void getCommentReq::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& getCommentReq::userid() const {
  // @@protoc_insertion_point(field_get:commonService.getCommentReq.userId)
  return userid_.GetNoArena();
}
inline void getCommentReq::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:commonService.getCommentReq.userId)
}
#if LANG_CXX11
inline void getCommentReq::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:commonService.getCommentReq.userId)
}
#endif
inline void getCommentReq::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:commonService.getCommentReq.userId)
}
inline void getCommentReq::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:commonService.getCommentReq.userId)
}
inline ::std::string* getCommentReq::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:commonService.getCommentReq.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* getCommentReq::release_userid() {
  // @@protoc_insertion_point(field_release:commonService.getCommentReq.userId)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void getCommentReq::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:commonService.getCommentReq.userId)
}

// optional string bookId = 2;
inline bool getCommentReq::has_bookid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void getCommentReq::set_has_bookid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void getCommentReq::clear_has_bookid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void getCommentReq::clear_bookid() {
  bookid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bookid();
}
inline const ::std::string& getCommentReq::bookid() const {
  // @@protoc_insertion_point(field_get:commonService.getCommentReq.bookId)
  return bookid_.GetNoArena();
}
inline void getCommentReq::set_bookid(const ::std::string& value) {
  set_has_bookid();
  bookid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:commonService.getCommentReq.bookId)
}
#if LANG_CXX11
inline void getCommentReq::set_bookid(::std::string&& value) {
  set_has_bookid();
  bookid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:commonService.getCommentReq.bookId)
}
#endif
inline void getCommentReq::set_bookid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bookid();
  bookid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:commonService.getCommentReq.bookId)
}
inline void getCommentReq::set_bookid(const char* value, size_t size) {
  set_has_bookid();
  bookid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:commonService.getCommentReq.bookId)
}
inline ::std::string* getCommentReq::mutable_bookid() {
  set_has_bookid();
  // @@protoc_insertion_point(field_mutable:commonService.getCommentReq.bookId)
  return bookid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* getCommentReq::release_bookid() {
  // @@protoc_insertion_point(field_release:commonService.getCommentReq.bookId)
  if (!has_bookid()) {
    return NULL;
  }
  clear_has_bookid();
  return bookid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void getCommentReq::set_allocated_bookid(::std::string* bookid) {
  if (bookid != NULL) {
    set_has_bookid();
  } else {
    clear_has_bookid();
  }
  bookid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bookid);
  // @@protoc_insertion_point(field_set_allocated:commonService.getCommentReq.bookId)
}

// optional int32 pageNum = 3;
inline bool getCommentReq::has_pagenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void getCommentReq::set_has_pagenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void getCommentReq::clear_has_pagenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void getCommentReq::clear_pagenum() {
  pagenum_ = 0;
  clear_has_pagenum();
}
inline ::google::protobuf::int32 getCommentReq::pagenum() const {
  // @@protoc_insertion_point(field_get:commonService.getCommentReq.pageNum)
  return pagenum_;
}
inline void getCommentReq::set_pagenum(::google::protobuf::int32 value) {
  set_has_pagenum();
  pagenum_ = value;
  // @@protoc_insertion_point(field_set:commonService.getCommentReq.pageNum)
}

// optional int32 lines = 4;
inline bool getCommentReq::has_lines() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void getCommentReq::set_has_lines() {
  _has_bits_[0] |= 0x00000008u;
}
inline void getCommentReq::clear_has_lines() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void getCommentReq::clear_lines() {
  lines_ = 0;
  clear_has_lines();
}
inline ::google::protobuf::int32 getCommentReq::lines() const {
  // @@protoc_insertion_point(field_get:commonService.getCommentReq.lines)
  return lines_;
}
inline void getCommentReq::set_lines(::google::protobuf::int32 value) {
  set_has_lines();
  lines_ = value;
  // @@protoc_insertion_point(field_set:commonService.getCommentReq.lines)
}

// optional int32 count = 5;
inline bool getCommentReq::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void getCommentReq::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void getCommentReq::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void getCommentReq::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 getCommentReq::count() const {
  // @@protoc_insertion_point(field_get:commonService.getCommentReq.count)
  return count_;
}
inline void getCommentReq::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:commonService.getCommentReq.count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commonService

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_common_2eproto
