// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fileupdown.proto

#ifndef PROTOBUF_INCLUDED_fileupdown_2eproto
#define PROTOBUF_INCLUDED_fileupdown_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_fileupdown_2eproto 

namespace protobuf_fileupdown_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_fileupdown_2eproto
namespace fileService {
class HttpRequest;
class HttpRequestDefaultTypeInternal;
extern HttpRequestDefaultTypeInternal _HttpRequest_default_instance_;
class HttpResponse;
class HttpResponseDefaultTypeInternal;
extern HttpResponseDefaultTypeInternal _HttpResponse_default_instance_;
class bookDownHttpRequest;
class bookDownHttpRequestDefaultTypeInternal;
extern bookDownHttpRequestDefaultTypeInternal _bookDownHttpRequest_default_instance_;
}  // namespace fileService
namespace google {
namespace protobuf {
template<> ::fileService::HttpRequest* Arena::CreateMaybeMessage<::fileService::HttpRequest>(Arena*);
template<> ::fileService::HttpResponse* Arena::CreateMaybeMessage<::fileService::HttpResponse>(Arena*);
template<> ::fileService::bookDownHttpRequest* Arena::CreateMaybeMessage<::fileService::bookDownHttpRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace fileService {

// ===================================================================

class HttpRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fileService.HttpRequest) */ {
 public:
  HttpRequest();
  virtual ~HttpRequest();

  HttpRequest(const HttpRequest& from);

  inline HttpRequest& operator=(const HttpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HttpRequest(HttpRequest&& from) noexcept
    : HttpRequest() {
    *this = ::std::move(from);
  }

  inline HttpRequest& operator=(HttpRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HttpRequest* internal_default_instance() {
    return reinterpret_cast<const HttpRequest*>(
               &_HttpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(HttpRequest* other);
  friend void swap(HttpRequest& a, HttpRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HttpRequest* New() const final {
    return CreateMaybeMessage<HttpRequest>(NULL);
  }

  HttpRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HttpRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HttpRequest& from);
  void MergeFrom(const HttpRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:fileService.HttpRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_fileupdown_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HttpResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fileService.HttpResponse) */ {
 public:
  HttpResponse();
  virtual ~HttpResponse();

  HttpResponse(const HttpResponse& from);

  inline HttpResponse& operator=(const HttpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HttpResponse(HttpResponse&& from) noexcept
    : HttpResponse() {
    *this = ::std::move(from);
  }

  inline HttpResponse& operator=(HttpResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HttpResponse* internal_default_instance() {
    return reinterpret_cast<const HttpResponse*>(
               &_HttpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(HttpResponse* other);
  friend void swap(HttpResponse& a, HttpResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HttpResponse* New() const final {
    return CreateMaybeMessage<HttpResponse>(NULL);
  }

  HttpResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HttpResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HttpResponse& from);
  void MergeFrom(const HttpResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:fileService.HttpResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_fileupdown_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class bookDownHttpRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fileService.bookDownHttpRequest) */ {
 public:
  bookDownHttpRequest();
  virtual ~bookDownHttpRequest();

  bookDownHttpRequest(const bookDownHttpRequest& from);

  inline bookDownHttpRequest& operator=(const bookDownHttpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bookDownHttpRequest(bookDownHttpRequest&& from) noexcept
    : bookDownHttpRequest() {
    *this = ::std::move(from);
  }

  inline bookDownHttpRequest& operator=(bookDownHttpRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bookDownHttpRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bookDownHttpRequest* internal_default_instance() {
    return reinterpret_cast<const bookDownHttpRequest*>(
               &_bookDownHttpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(bookDownHttpRequest* other);
  friend void swap(bookDownHttpRequest& a, bookDownHttpRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bookDownHttpRequest* New() const final {
    return CreateMaybeMessage<bookDownHttpRequest>(NULL);
  }

  bookDownHttpRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<bookDownHttpRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const bookDownHttpRequest& from);
  void MergeFrom(const bookDownHttpRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bookDownHttpRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string bookId = 1;
  bool has_bookid() const;
  void clear_bookid();
  static const int kBookIdFieldNumber = 1;
  const ::std::string& bookid() const;
  void set_bookid(const ::std::string& value);
  #if LANG_CXX11
  void set_bookid(::std::string&& value);
  #endif
  void set_bookid(const char* value);
  void set_bookid(const char* value, size_t size);
  ::std::string* mutable_bookid();
  ::std::string* release_bookid();
  void set_allocated_bookid(::std::string* bookid);

  // optional string dayTime = 3;
  bool has_daytime() const;
  void clear_daytime();
  static const int kDayTimeFieldNumber = 3;
  const ::std::string& daytime() const;
  void set_daytime(const ::std::string& value);
  #if LANG_CXX11
  void set_daytime(::std::string&& value);
  #endif
  void set_daytime(const char* value);
  void set_daytime(const char* value, size_t size);
  ::std::string* mutable_daytime();
  ::std::string* release_daytime();
  void set_allocated_daytime(::std::string* daytime);

  // optional int32 userId = 2;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // optional int32 count = 4;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 4;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fileService.bookDownHttpRequest)
 private:
  void set_has_bookid();
  void clear_has_bookid();
  void set_has_userid();
  void clear_has_userid();
  void set_has_daytime();
  void clear_has_daytime();
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr bookid_;
  ::google::protobuf::internal::ArenaStringPtr daytime_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 count_;
  friend struct ::protobuf_fileupdown_2eproto::TableStruct;
};
// ===================================================================

class fileService_Stub;

class fileService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline fileService() {};
 public:
  virtual ~fileService();

  typedef fileService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void fileDownFun(::google::protobuf::RpcController* controller,
                       const ::fileService::HttpRequest* request,
                       ::fileService::HttpResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void bookDownFun(::google::protobuf::RpcController* controller,
                       const ::fileService::bookDownHttpRequest* request,
                       ::fileService::HttpResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(fileService);
};

class fileService_Stub : public fileService {
 public:
  fileService_Stub(::google::protobuf::RpcChannel* channel);
  fileService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~fileService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements fileService ------------------------------------------

  void fileDownFun(::google::protobuf::RpcController* controller,
                       const ::fileService::HttpRequest* request,
                       ::fileService::HttpResponse* response,
                       ::google::protobuf::Closure* done);
  void bookDownFun(::google::protobuf::RpcController* controller,
                       const ::fileService::bookDownHttpRequest* request,
                       ::fileService::HttpResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(fileService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HttpRequest

// -------------------------------------------------------------------

// HttpResponse

// -------------------------------------------------------------------

// bookDownHttpRequest

// required string bookId = 1;
inline bool bookDownHttpRequest::has_bookid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bookDownHttpRequest::set_has_bookid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bookDownHttpRequest::clear_has_bookid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bookDownHttpRequest::clear_bookid() {
  bookid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bookid();
}
inline const ::std::string& bookDownHttpRequest::bookid() const {
  // @@protoc_insertion_point(field_get:fileService.bookDownHttpRequest.bookId)
  return bookid_.GetNoArena();
}
inline void bookDownHttpRequest::set_bookid(const ::std::string& value) {
  set_has_bookid();
  bookid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fileService.bookDownHttpRequest.bookId)
}
#if LANG_CXX11
inline void bookDownHttpRequest::set_bookid(::std::string&& value) {
  set_has_bookid();
  bookid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fileService.bookDownHttpRequest.bookId)
}
#endif
inline void bookDownHttpRequest::set_bookid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bookid();
  bookid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fileService.bookDownHttpRequest.bookId)
}
inline void bookDownHttpRequest::set_bookid(const char* value, size_t size) {
  set_has_bookid();
  bookid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fileService.bookDownHttpRequest.bookId)
}
inline ::std::string* bookDownHttpRequest::mutable_bookid() {
  set_has_bookid();
  // @@protoc_insertion_point(field_mutable:fileService.bookDownHttpRequest.bookId)
  return bookid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* bookDownHttpRequest::release_bookid() {
  // @@protoc_insertion_point(field_release:fileService.bookDownHttpRequest.bookId)
  if (!has_bookid()) {
    return NULL;
  }
  clear_has_bookid();
  return bookid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void bookDownHttpRequest::set_allocated_bookid(::std::string* bookid) {
  if (bookid != NULL) {
    set_has_bookid();
  } else {
    clear_has_bookid();
  }
  bookid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bookid);
  // @@protoc_insertion_point(field_set_allocated:fileService.bookDownHttpRequest.bookId)
}

// optional int32 userId = 2;
inline bool bookDownHttpRequest::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bookDownHttpRequest::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bookDownHttpRequest::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bookDownHttpRequest::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 bookDownHttpRequest::userid() const {
  // @@protoc_insertion_point(field_get:fileService.bookDownHttpRequest.userId)
  return userid_;
}
inline void bookDownHttpRequest::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:fileService.bookDownHttpRequest.userId)
}

// optional string dayTime = 3;
inline bool bookDownHttpRequest::has_daytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bookDownHttpRequest::set_has_daytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bookDownHttpRequest::clear_has_daytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bookDownHttpRequest::clear_daytime() {
  daytime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_daytime();
}
inline const ::std::string& bookDownHttpRequest::daytime() const {
  // @@protoc_insertion_point(field_get:fileService.bookDownHttpRequest.dayTime)
  return daytime_.GetNoArena();
}
inline void bookDownHttpRequest::set_daytime(const ::std::string& value) {
  set_has_daytime();
  daytime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fileService.bookDownHttpRequest.dayTime)
}
#if LANG_CXX11
inline void bookDownHttpRequest::set_daytime(::std::string&& value) {
  set_has_daytime();
  daytime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fileService.bookDownHttpRequest.dayTime)
}
#endif
inline void bookDownHttpRequest::set_daytime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_daytime();
  daytime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fileService.bookDownHttpRequest.dayTime)
}
inline void bookDownHttpRequest::set_daytime(const char* value, size_t size) {
  set_has_daytime();
  daytime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fileService.bookDownHttpRequest.dayTime)
}
inline ::std::string* bookDownHttpRequest::mutable_daytime() {
  set_has_daytime();
  // @@protoc_insertion_point(field_mutable:fileService.bookDownHttpRequest.dayTime)
  return daytime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* bookDownHttpRequest::release_daytime() {
  // @@protoc_insertion_point(field_release:fileService.bookDownHttpRequest.dayTime)
  if (!has_daytime()) {
    return NULL;
  }
  clear_has_daytime();
  return daytime_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void bookDownHttpRequest::set_allocated_daytime(::std::string* daytime) {
  if (daytime != NULL) {
    set_has_daytime();
  } else {
    clear_has_daytime();
  }
  daytime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), daytime);
  // @@protoc_insertion_point(field_set_allocated:fileService.bookDownHttpRequest.dayTime)
}

// optional int32 count = 4;
inline bool bookDownHttpRequest::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bookDownHttpRequest::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bookDownHttpRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bookDownHttpRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 bookDownHttpRequest::count() const {
  // @@protoc_insertion_point(field_get:fileService.bookDownHttpRequest.count)
  return count_;
}
inline void bookDownHttpRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:fileService.bookDownHttpRequest.count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fileService

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_fileupdown_2eproto
